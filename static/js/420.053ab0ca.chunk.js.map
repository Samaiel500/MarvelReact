{"version":3,"file":"static/js/420.053ab0ca.chunk.js","mappings":"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","sources":["components/errrorMassage/ErrorMassage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    \r\n    useEffect(() => {\r\n        updateChar();\r\n        //eslint-disable-next-line\r\n    }, [])\r\n    \r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, Viver, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )  \r\n}\r\n\r\nconst Viver = ({data}) => {\r\n    const { name, thumbnail, description, homepage, wiki } = data;\r\n    let letStyle = {'objectFit': 'cover'}\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        letStyle = {'objectFit': 'unset'}\r\n    }\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img style={letStyle} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect,useRef, useMemo } from 'react';\r\nimport './charList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errrorMassage/ErrorMassage';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n        case 'loaded':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'confirmed':\r\n            return <Component />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offSet, setOffSet] = useState(190);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateList(offSet, true);\r\n        //eslint-disable-next-line\r\n    }, [])\r\n\r\n    const updateList = (offSet, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offSet)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffSet(offSet => offSet + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const changeStyle = (id) => {\r\n        itemRefs.current.forEach(el => el.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    const items = arr => {\r\n        const card = arr.map((item, i) => {\r\n            const { name, thumbnail, id } = item;\r\n            let styleCard = { 'objectFit': 'cover' };\r\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                styleCard = {'objectFit' : 'unset'};\r\n            }\r\n            return (\r\n                <CSSTransition key={id} timeout={500} classNames=\"char__item\">\r\n                    <li ref={el => itemRefs.current[i] = el} \r\n                        tabIndex={0}\r\n                        onClick={() => { props.onCharId(id); changeStyle(i) }}\r\n                        className=\"char__item\"\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharId(id);\r\n                                changeStyle(i);\r\n                            }\r\n                        }}>\r\n                        <img style={styleCard} src={thumbnail} alt={name}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {card}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => items(charList), newItemLoading);\r\n        //eslint-disable-next-line\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button style={{'display': charEnded ? 'none' : 'block'}} disabled={newItemLoading} onClick={() => updateList(offSet)} className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )  \r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport './charInfo.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst CharInfo = (props) => { \r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        //eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, Viver, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Viver = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n    let styleCard = { 'objectFit': 'cover' };\r\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                styleCard = {'objectFit' : 'unset'};\r\n            }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={styleCard}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character...'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errrorMassage/ErrorMassage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errrorMassage/ErrorMassage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n    \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n    \r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default CharSearchForm;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharId = (id) => {\r\n        setChar(id);\r\n    }\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharId={onCharId}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    //const _apiComics = 'https://gateway.marvel.com:443/v1/public/comics?limit=8&offset=30&'\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=72b9d98c559269c8102fa10649839153';\r\n    const _numCharacter = 190;\r\n    const _numComics = 30;\r\n\r\n    const getAllCharacters = async (numCharacter = _numCharacter) => {\r\n        const req = await request(`${_apiBase}characters?limit=9&offset=${numCharacter}&${_apiKey}`)\r\n        return req.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const req = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n        return _transformCharacter(req.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComics = async (numComics = _numComics) => {\r\n        const req = await request(`${_apiBase}comics?limit=8&offset=${numComics}&${_apiKey}`)\r\n        return req.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (numComic) => {\r\n        const req = await request(`${_apiBase}comics/${numComic}?${_apiKey}`)\r\n        return _transformComics(req.data.results[0])\r\n    }\r\n\r\n    const _transformComics = (char) => {\r\n        return {\r\n            id: char.id,\r\n            title: char.title,\r\n            description: char.description || 'There is no description',\r\n            pageCount: char.pageCount ? `${char.pageCount} p.` : 'No information about the number of pages',\r\n            price: char.prices[0].price ? `${char.prices[0].price}$` : 'not available',\r\n            language: char.textObjects.language || 'en-us',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${ char.description.slice(0, 210) }...` : 'Something information about this hero...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {process, setProcess, getAllCharacters, getCharacter, getComics, getComic, clearError, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setProcess('loaded');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loaded');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import ErrorMessage from \"../components/errrorMassage/ErrorMassage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loaded':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","Viver","data","name","thumbnail","description","homepage","wiki","letStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offSet","setOffSet","charEnded","setCharEnded","getAllCharacters","updateList","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","changeStyle","current","forEach","el","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","card","map","item","i","styleCard","CSSTransition","timeout","classNames","ref","tabIndex","onCharId","onKeyPress","e","key","TransitionGroup","component","items","disabled","comics","charId","ErrorBoundary","state","error","this","setState","children","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","numCharacter","req","_transformCharacter","res","getComics","numComics","_transformComics","getComic","numComic","title","pageCount","price","prices","language","textObjects","path","extension","slice","urls"],"sourceRoot":""}