{"version":3,"file":"static/js/924.f55f50b4.chunk.js","mappings":"oLA4CA,UArCmB,SAAC,GAA2B,IAA1BA,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SACjBC,GAAMC,EAAAA,EAAAA,MAAND,GACP,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkEC,EAAAA,EAAAA,KAA3DC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,QAASC,EAApD,EAAoDA,YAEpDC,EAAAA,EAAAA,YAAU,WACNC,GAEH,GAAE,CAACZ,IAEJ,IAAMY,EAAa,WAGf,OAFAJ,IAEQT,GACJ,IAAK,QACDO,EAASN,GAAIa,KAAKC,GAAcD,MAAK,kBAAMH,EAAW,YAAjB,IACrC,MACJ,IAAK,YACDH,EAAaP,GAAIa,KAAKC,GAAcD,MAAK,kBAAMH,EAAW,YAAjB,IAKpD,EAEKI,EAAe,SAACX,GAClBC,EAAQD,EACX,EAED,OACI,iCACI,SAAC,IAAD,KACCY,EAAAA,EAAAA,GAAWN,EAASX,EAAWK,KAG/C,C,8ECvBD,EAjBiB,WACb,OACI,iCACI,cAAGa,UAAU,eAAb,2DACA,iBAAKA,UAAU,WAAf,WACI,iBAAKA,UAAU,yBAAf,WACI,gBAAKA,UAAU,4BACf,gBAAKA,UAAU,6BAEnB,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,2BACf,gBAAKA,UAAU,+BAI9B,E,UCED,EAfmB,SAACP,EAASX,EAAWK,GACpC,OAAQM,GACJ,IAAK,UACD,OAAO,SAAC,EAAD,IACX,IAAK,SACD,OAAO,SAACQ,EAAA,EAAD,IACX,IAAK,YACD,OAAO,SAACnB,EAAD,CAAWK,KAAMA,IAC5B,IAAK,QACD,OAAO,SAAC,IAAD,IACX,QACI,MAAM,IAAIe,MAAM,4BAE3B,C","sources":["components/pages/SinglePage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData()\r\n            //eslint-disable-next-line\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                    break;\r\n                case 'character':\r\n                    getCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                {setContent(process, Component, data)}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import ErrorMessage from \"../components/errrorMassage/ErrorMassage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loaded':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["Component","dataType","id","useParams","useState","data","setData","useMarvelService","getComic","getCharacter","clearError","process","setProcess","useEffect","updateData","then","onDataLoaded","setContent","className","Spinner","Error"],"sourceRoot":""}